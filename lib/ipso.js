// Generated by CoffeeScript 1.6.3
var assert, does, facto, ipso, parallel, spectate, subscribe, util, _ref, _ref1;

_ref = require('also'), util = _ref.util, parallel = _ref.parallel;

facto = require('facto');

does = require('does');

_ref1 = does({
  does: {
    mode: 'spec'
  }
}), subscribe = _ref1.subscribe, spectate = _ref1.spectate, assert = _ref1.assert;

require('./mocha_runner').on('spec_event', function(payload) {
  return console.log({
    HUH: payload
  });
});

module.exports = ipso = function(fn) {
  var fnArgs;
  fnArgs = util.argsOf(fn);
  if (fnArgs.length === 0) {
    return function() {
      return fn.call(this);
    };
  }
  return function(done) {
    var inject, nodule, promise, _i, _len,
      _this = this;
    inject = [];
    if (fnArgs[0] === 'done') {
      inject.push(done);
      fnArgs.shift();
    } else {
      if (fnArgs[0] !== 'facto' ? done != null : void 0) {
        done();
      }
    }
    if (fnArgs[0] === 'facto') {
      fnArgs.shift();
      inject.push(function(metadata) {
        return assert(done).then(function(result) {
          facto(metadata);
          return done();
        }, function(error) {
          return facto(metadata);
        }, function(notify) {});
      });
      promise = parallel((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fnArgs.length; _i < _len; _i++) {
          nodule = fnArgs[_i];
          _results.push((function(nodule) {
            return function() {
              return spectate(require(nodule));
            };
          })(nodule));
        }
        return _results;
      })()).then(function(nodules) {
        var nodule, _i, _len;
        for (_i = 0, _len = nodules.length; _i < _len; _i++) {
          nodule = nodules[_i];
          inject.push(nodule);
        }
        return fn.apply(_this, inject);
      }, done);
      if ((promise != null) && (promise.then != null)) {
        promise.then((function() {}), done);
      }
      return;
    } else {
      for (_i = 0, _len = fnArgs.length; _i < _len; _i++) {
        nodule = fnArgs[_i];
        inject.push(require(nodule));
      }
      promise = fn.apply(this, inject);
    }
    if ((promise != null) && (promise.then != null)) {
      return promise.then((function() {}), done);
    }
  };
};

module.exports.once = function(fn) {
  return (function(done) {
    return function() {
      if (done) {
        return;
      }
      done = true;
      return fn.apply(this, arguments);
    };
  })(false);
};
