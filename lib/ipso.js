// Generated by CoffeeScript 1.6.3
var does, facto, parallel, spectate, util, _ref;

_ref = require('also'), util = _ref.util, parallel = _ref.parallel;

facto = require('facto');

does = require('does').does;

spectate = does({
  mode: 'spec'
}).spectate;

module.exports = function(fn) {
  var fnArgs;
  fnArgs = util.argsOf(fn);
  if (fnArgs.length === 0) {
    return function() {
      return fn.call(this);
    };
  }
  return function(done) {
    var inject, nodule, promise, _i, _len,
      _this = this;
    inject = [];
    if (fnArgs[0] === 'done') {
      inject.push(done);
      fnArgs.shift();
    } else {
      if (fnArgs[0] !== 'facto' ? done != null : void 0) {
        done();
      }
    }
    if (fnArgs[0] === 'facto') {
      inject.push(function(meta) {
        return facto(done(), meta);
      });
      fnArgs.shift();
      return parallel((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fnArgs.length; _i < _len; _i++) {
          nodule = fnArgs[_i];
          _results.push(function() {
            return spectate(require(nodule));
          });
        }
        return _results;
      })()).then(function(nodules) {
        var nodule, promise, _i, _len;
        for (_i = 0, _len = nodules.length; _i < _len; _i++) {
          nodule = nodules[_i];
          inject.push(nodule);
        }
        promise = fn.apply(_this, inject);
        if ((promise != null) && (promise.then != null)) {
          return promise.then((function() {}), done);
        }
      }, done);
    } else {
      console.log({
        moo: 1
      });
      for (_i = 0, _len = fnArgs.length; _i < _len; _i++) {
        nodule = fnArgs[_i];
        inject.push(require(nodule));
      }
      promise = fn.apply(this, inject);
    }
    if ((promise != null) && (promise.then != null)) {
      return promise.then((function() {}), done);
    }
  };
};
