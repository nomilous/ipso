// Generated by CoffeeScript 1.6.3
var Loader, assert, config, does, facto, ipso, loadModules, spectate, util, _ref;

util = require('also').util;

facto = require('facto');

Loader = require('./loader');

does = require('does');

_ref = does({
  does: {
    mode: 'spec'
  }
}), spectate = _ref.spectate, assert = _ref.assert;

config = {
  dir: process.cwd(),
  modules: {}
};

loadModules = Loader.create(config).loadModules;

module.exports = ipso = function(fn) {
  var fnArgsArray;
  fnArgsArray = util.argsOf(fn);
  if (fnArgsArray.length === 0) {
    return function() {
      return fn.call(this);
    };
  }
  return function(done) {
    var arg1, inject, nodule, promise, _i, _len,
      _this = this;
    inject = [];
    if (fnArgsArray[0] === 'done' || fnArgsArray[0] === 'facto') {
      fnArgsArray.shift();
      inject.push(arg1 = function(metadata) {
        return assert(done).then(function(result) {
          if (fnArgsArray[0] === 'facto') {
            facto(metadata);
          }
          return done();
        }, function(error) {
          if (fnArgsArray[0] === 'facto') {
            return facto(metadata);
          }
        }, function(notify) {});
      });
      return loadModules(spectate, fnArgsArray).then(function(Modules) {
        var Module, argN, _i, _len;
        for (_i = 0, _len = Modules.length; _i < _len; _i++) {
          Module = Modules[_i];
          inject.push(argN = Module);
        }
        return fn.apply(_this, inject);
      }, done).then((function() {}), done);
    } else {
      for (_i = 0, _len = fnArgsArray.length; _i < _len; _i++) {
        nodule = fnArgsArray[_i];
        inject.push(require(nodule));
      }
      promise = fn.apply(this, inject);
      process.nextTick(function() {
        if (done != null) {
          return done();
        }
      });
      try {
        return promise.then((function() {}), done);
      } catch (_error) {}
    }
  };
};

module.exports.once = function(fn) {
  return (function(done) {
    return function() {
      if (done) {
        return;
      }
      done = true;
      return fn.apply(this, arguments);
    };
  })(false);
};
