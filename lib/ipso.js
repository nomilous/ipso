// Generated by CoffeeScript 1.6.3
var Does, Loader, colors, config, deferred, does, facto, ipso, loadModules, parallel, util, _ref;

_ref = require('also'), util = _ref.util, deferred = _ref.deferred, parallel = _ref.parallel;

facto = require('facto');

Loader = require('./loader');

colors = require('colors');

Does = require('does');

does = Does({
  does: {
    mode: 'spec'
  }
});

config = {
  dir: process.cwd(),
  modules: {}
};

loadModules = Loader.create(config).loadModules;

module.exports = ipso = function(testFunction) {
  var fnArgsArray, inject;
  fnArgsArray = util.argsOf(testFunction);
  inject = [];
  if (fnArgsArray.length === 0) {
    return function() {
      return testFunction.call(this);
    };
  } else if (fnArgsArray[0] !== 'done' && fnArgsArray[0] !== 'facto') {
    return function(done) {
      var _this = this;
      does.activate({
        context: this,
        mode: 'spec',
        spec: this.test,
        resolver: done
      });
      return loadModules(fnArgsArray, does).then(function(Modules) {
        var Module, argN, _i, _len;
        for (_i = 0, _len = Modules.length; _i < _len; _i++) {
          Module = Modules[_i];
          inject.push(argN = Module);
        }
        testFunction.apply(_this, inject);
        return done();
      }, done).then(function() {
        return does.assert(done).then((function() {}), done);
      });
    };
  }
  return function(done) {
    var arg1,
      _this = this;
    does.activate({
      context: this,
      mode: 'spec',
      spec: this.test,
      resolver: done
    });
    if (fnArgsArray[0] === 'done' || fnArgsArray[0] === 'facto') {
      fnArgsArray.shift();
      inject.push(arg1 = function(metadata) {
        return does.assert(done).then(function(result) {
          if (fnArgsArray[0] === 'facto') {
            facto(metadata);
          }
          return done();
        }, function(error) {
          if (fnArgsArray[0] === 'facto') {
            return facto(metadata);
          }
        }, function(notify) {});
      });
    }
    return loadModules(fnArgsArray, does).then(function(Modules) {
      var Module, argN, _i, _len;
      for (_i = 0, _len = Modules.length; _i < _len; _i++) {
        Module = Modules[_i];
        inject.push(argN = Module);
      }
      return testFunction.apply(_this, inject);
    }, done).then((function() {}), done);
  };
};

ipso.modules = function(list) {
  var tag;
  for (tag in list) {
    if (list[tag].require == null) {
      throw new Error('ipso.module expects { tagName: { require: "path/or/name" } }');
    }
    config.modules[tag] = list[tag];
  }
  return ipso;
};

ipso.tag = deferred(function(action, list) {
  var tag;
  return parallel((function() {
    var _results;
    _results = [];
    for (tag in list) {
      _results.push((function(tag) {
        return function() {
          return does.spectate({
            name: tag,
            tagged: true
          }, list[tag]);
        };
      })(tag));
    }
    return _results;
  })()).then(action.resolve, action.reject, action.notify);
});

module.exports.once = function(fn) {
  return (function(done) {
    return function() {
      if (done) {
        return;
      }
      done = true;
      return fn.apply(this, arguments);
    };
  })(false);
};
