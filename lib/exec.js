// Generated by CoffeeScript 1.6.3
var action, bin, colors, input, inspector, keypress, kid, kids, normalize, program, prompt, readFileSync, refresh, run, shutdown, spawn, webPort, _ref;

readFileSync = require('fs').readFileSync;

normalize = require('path').normalize;

spawn = require('child_process').spawn;

colors = require('colors');

program = require('commander');

keypress = require('keypress');

keypress(process.stdin);

program.version(JSON.parse(readFileSync(__dirname + '/../package.json'), 'utf8').version);

program.option('-i, --inspector', 'Start node-inspector.');

program.option('-w, --web-port [webPort]', 'Node inspector @ alternate port.');

_ref = program.parse(process.argv), inspector = _ref.inspector, webPort = _ref.webPort;

kids = [];

if (inspector) {
  bin = normalize(__dirname + '/../node_modules/.bin/node-inspector');
  kids.push(kid = spawn(bin, [
    "--web-port=" + (((function() {
      try {
        return parseInt(webPort);
      } catch (_error) {}
    })()) || 8080)
  ]));
  kid.stdout.on('data', function(chunk) {
    return refresh(chunk.toString());
  });
  kid.stderr.on('data', function(chunk) {
    return refresh(chunk.toString(), 'stderr');
  });
}

prompt = '> ';

input = '';

refresh = function(output, stream) {
  if (output != null) {
    switch (stream) {
      case 'stderr':
        process.stdout.write(output.red);
        break;
      default:
        process.stdout.write(output);
    }
  }
  process.stdout.clearLine();
  process.stdout.cursorTo(0);
  return process.stdout.write(prompt + input);
};

shutdown = function(code) {
  var _i, _len;
  for (_i = 0, _len = kids.length; _i < _len; _i++) {
    kid = kids[_i];
    kid.kill();
  }
  return process.exit(code);
};

action = function() {
  if (input !== '') {
    console.log({
      action: input
    });
  }
  return input = '';
};

run = function() {
  var stdin;
  stdin = process.openStdin();
  process.stdin.setRawMode(true);
  refresh();
  return process.stdin.on('keypress', function(chunk, key) {
    var ctrl, meta, name, sequence, shift;
    try {
      name = key.name, ctrl = key.ctrl, meta = key.meta, shift = key.shift, sequence = key.sequence;
    } catch (_error) {}
    if (ctrl && name === 'c') {
      return shutdown(0);
    }
    if (name === 'backspace') {
      input = input.slice(0, -1);
      return refresh();
    }
    if (name === 'return') {
      process.stdout.write('\n');
      action();
      process.stdout.write(prompt + input);
      return;
    }
    if (!chunk) {
      return;
    }
    input += chunk.toString();
    return refresh();
  });
};

run();
