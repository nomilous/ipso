// Generated by CoffeeScript 1.6.3
var activated, fs, lstatOverride, override, sep;

fs = require('fs');

sep = require('path').sep;

module.exports = function(list) {
  var moduleName, name, type, _results;
  if (!activated) {
    module.exports.activate();
  }
  _results = [];
  for (moduleName in list) {
    if (moduleName.match(/^\$/)) {
      type = 'function';
      name = moduleName.slice(1);
    } else {
      type = 'literal';
      name = moduleName;
    }
    _results.push(override[name] = {
      type: type,
      'package.json': {
        name: name,
        version: '0.0.0',
        main: 'STUBBED.js',
        dependencies: {}
      },
      'STUBBED.js': list[moduleName]
    });
  }
  return _results;
};

override = {};

lstatOverride = {};

activated = false;

module.exports.activate = function() {
  var lstatSync, readFileSync, statSync;
  activated = true;
  readFileSync = fs.readFileSync;
  fs.readFileSync = function(path, encoding) {
    /* MODIFIED BY ipso.define*/

    var file, mod, modulePath, modulesPath, parts, scriptPath, type, _ref;
    _ref = path.split(sep).slice(-2), mod = _ref[0], file = _ref[1];
    parts = path.split(sep).slice(0, -2);
    modulesPath = parts.join(sep);
    modulePath = parts.concat([mod]).join(sep);
    scriptPath = parts.concat([mod, 'STUBBED.js']).join(sep);
    if (override.hasOwnProperty(mod)) {
      type = override[mod].type;
      switch (file) {
        case 'package.json':
          lstatOverride[modulesPath] = 1;
          lstatOverride[modulePath] = 1;
          lstatOverride[scriptPath] = 1;
          return JSON.stringify(override[mod]['package.json']);
        case 'STUBBED.js':
          if (typeof override[mod]['STUBBED.js'] === 'function') {
            return "ipso = require('ipso');\nget  = function(tag) {\n\n    try { return ipso.does.getSync(tag).object }\n    catch (error) { console.log('ipso: missing mock \"%s\"', tag); }\n\n}; \n\nmodule.exports = " + ((function() {
              switch (type) {
                case 'function':
                  return override[mod]['STUBBED.js'].toString();
                case 'literal':
                  return "(" + (override[mod]['STUBBED.js'].toString()) + ").call(this);";
              }
            })());
          } else {
            console.log("ipso.define(list) requires list of functions to be exported as modules,\ndoes not (yet?) support define() for modules that export objects".red);
          }
      }
    }
    return readFileSync(path, encoding);
  };
  statSync = fs.statSync;
  fs.statSync = function(path) {
    /* MODIFIED BY ipso.define*/

    if (path.match(/STUBBED.js/)) {
      return {
        isDirectory: function() {
          return false;
        }
      };
    }
    return statSync(path);
  };
  lstatSync = fs.lstatSync;
  return fs.lstatSync = function(path) {
    /* MODIFIED BY ipso.define*/

    if (lstatOverride[path] != null) {
      return {
        isSymbolicLink: function() {
          return false;
        }
      };
    }
    return lstatSync(path);
  };
};
